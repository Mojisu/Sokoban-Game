#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <ncurses.h>
#include <signal.h>
#include <string.h>

#define WIDTH	14
#define HEIGHT	10

#define BOX 2
#define WALL 1
#define WAY 0
#define DESTINATION 3
#define DSTNBOX 4

#define NOTHING	10
#define QUIT 'q'
#define PREV 'z'
#define NEXT 'n'
#define BACK 'b'

#define UP 0
#define DOWN 1
#define LEFT 2
#define RIGHT 3

#define MAX_ELEMENTS 1000
#define NAMELEN 10

int num_per=0;
typedef struct _Node{
	int score;
	char name[1+NAMELEN];
	struct _Node* next;
}Node;

Node *ptr=NULL, *head=NULL, *pre=NULL, *t=NULL;

void createRankList();
void rank();
void writeRankFile();
void newRank(int score);
void freeall();

/*
 * Use these definitions if they are needed
 #define PREV 'z'
 #define RESTART 'r'
 #define NEXT 'n'
 #define BACK 'b'
 */


char field[HEIGHT][WIDTH];	// map
int score;
struct cursor_{
	int x;
	int y;
}cursor;					// user's current location

int gameOver = 0;
int timeOver = 0;
int leftBoxes;
int totalBoxes;

// Time Variables
int initTime = 0;
int nowTime = 0;
int deltaTime = 0;
int stageLimitTime = -1;

void CheckToMove();

void CheckGameOver();
void InitGame();
void DrawOutline();
int GetCommand();
int ProcessCommand(int command);
void DrawField();
void PrintScore(int score);
void DrawBox(int y, int x, int height, int width);

//stack

struct STACK{
	char field[HEIGHT][WIDTH];
	struct cursor_ c;
}STACK;

struct STACK Stack[MAX_ELEMENTS];
int top = -1;

void push(struct cursor_ c);
struct cursor_ pop();

//map
typedef struct{
	char field[10][14];
	int box;
	int LimitTime;
}Map;
int stage;

Map mapDatas[12] = {
	/* Stage 1 */
	"00000000000000",
	"00000111000000",
	"00000131000000",
	"00000121111000",
	"00011100231000",
	"00013290111000",
	"00011112100000",
	"00000013100000",
	"00000011100000",
	"00000000000000",
	4,30,

	/* Stage 2 */
	"11111111111111",
	"13300000000001",
	"13311102111201",
	"13309100010001",
	"13011120010201",
	"10010000101001",
	"10011100101001",
	"10202000020001",
	"10000000000001",
	"11111111111111",
	7,180,

	/* Stage 3 */
	"00000000000000",
	"00000000000000",
	"00001111110000",
	"00011000011000",
	"00010202201000",
	"00013333331000",
	"00010220201000",
	"00011109111000",
	"00000111100000",
	"00000000000000",
	 6,100,

	/* Stage 4 */
	"11111111111100",
	"13300100000111",
	"13300102002001",
	"13300121111001",
	"13300009011001",
	"13300101002011",
	"11111101120201",
	"00102002020201",
	"00100001000001",
	"00111111111111",
	10,500,


	/* Stage 5 */
	"11111111111111",
	"10000000000001",
	"10209002000001",
	"10011100011101",
	"10010020210001",
	"10010200011101",
	"10011102000101",
	"13330000011101",
	"13330000000001",
	"11111111111111",
	6,100,


	/* Stage 6 */
	"11111111111111",
	"13300000000031",
	"10111100111031",
	"10100020100001",
	"10102002102001",
	"10111100101101",
	"10090102111101",
	"10111100020101",
	"13300000000001",
	"11111111111111",
	6,100,

	/* stage 7 */
	"10101010101010",
	"01310131013100",
	"10000000000010",
	"11002002200110",
	"10100010001010",
	"10010100010010",
	"10201000102010",
	"10009200000010",
	"01310131013100",
	"10101010101010",
	 6,80,

	/* stage 8 */
	"10011000011001",
	"10100111100101",
	"01300011000310",
	"13001000010031",
	"10002200020001",
	"10212090221201",
	"10000000000001",
	"01300011000310",
	"10103111130101",
	"10011000011001",
	8,100,

	/* stage 9 */
	"00000000000000",
	"00000000000000",
	"00000111111000",
	"00000100001000",
	"00011122201000",
	"00019023301000",
	"00010233311000",
	"00011110010000",
	"00000011110000",
	"00000000000000",
	5,60,


	/* Stage 10 */
	"00000000000000",
	"00000000000000",
	"00011111110000",
	"00013030310000",
	"00010222010000",
	"00013292310000",
	"00010222010000",
	"00013030310000",
	"00011111110000",
	"00000000000000",
	8,100,


	/* Stage 11 */
	"00000000000000",
	"00000111110000",
	"00000109010000",
	"00000102010000",
	"00000123210000",
	"00011132311000",
	"00110323231110",
	"00100232320010",
	"00100003000010",
	"00111111111110",
	9,120,

	/* Stage 12 */
	"11111111111111",
	"10000011100001",
	"10020010020001",
	"11110033000111",
	"10020933100001",
	"10110033101111",
	"10100000120001",
	"10020010020001",
	"10000010000001",
	"11111111111111",
	6,120

};

/* Demo Play */
int demoPflag=0, demoCount=0;
char demo[12][600] = {
	"00133211022",

	"222003333311301111113333300000002222222222333333333311203022222222233311111311222202120000011111333302212000001111133333022222120000111133333333333022222222212000011133333333330000211131222222222212000",
	"00200331211120300022121133220033221133020031033121230022131113020003313112233002233112203121203300021022133031",
	
	"22021111113333333002131222222333330000311110000033331111112222222223333300000002111113122222333300002111312223300022130311131222",
	"2211333330000003022222333311113000203333311221330002222121222133033112000302222333311111131222222333333330221220031312222233333333300000",
	"3031222220031133333333300211222000013300221201221203021201333331302033130",
	"313333000202211333130120221022113332003311002222130311100222121222000011133330002110222120333221133030220211133033120211",
	"13330233300221121220333002110033312021",
	"3030222331122332210330022331122121333220033002212110030331122302111330301210300112122003321",
	"3112121221133330321222200331303220031212211303313302222300312130003002102111311201313302120133330221220221220332133",
	"0002221330312131121112203313002032121220003333113313300030220213330021312231113312221200"
};

void showHelp();
